variables:
- name: ServiceConnection
  value: _YOUR_SERVICE_CONNECTION_

jobs:
- job: InfraDeploy
  pool:
    vmImage: macOS-latest
  steps:
    - task: AzureCLI@2
      name: frosti
      displayName: Run frosti
      inputs:
        azureSubscription: '$(ServiceConnection)'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          az --version
          az account show
          brew update
          brew install CirroBuild/tap/frosti
          $myAppNames = frosti provision -e ppe | grep -E 'WebAppName|FunctionAppName' 
          $myWebApp = $myAppNames | grep WebAppName | sed -e 's/WebAppName://g'
          $myFunctionApp = $myAppNames | grep FunctionAppName | sed -e 's/FunctionAppName://g'
          Write-Host "##vso[task.setvariable variable=webApp;isOutput=true]$myWebApp"
          Write-Host "##vso[task.setvariable variable=functionApp;isOutput=true]$myFunctionApp"

- job: BuildProject
  pool:
    vmImage: macOS-latest
  steps:
    - task: DotNetCoreCLI@2
      displayName: dotnet restore
      inputs:
        command: restore
        projects: CascadeBrewingCo.csproj
    - task: DotNetCoreCLI@2
      displayName: dotnet build
      inputs:
        command: build
        projects: CascadeBrewingCo.csproj
        arguments: -c $(buildConfiguration)
    - task: DotNetCoreCLI@2
      displayName: dotnet publish
      inputs:
        command: publish
        publishWebProjects: false
        projects: CascadeBrewingCo.csproj
        arguments: -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/publish
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: CascadeBrewingCo'
      inputs:
        PathtoPublish: $(Build.ArtifactStagingDirectory)/publish
        ArtifactName: CascadeBrewingCo

- job: CodeDeploy
  dependsOn: 
  - InfraDeploy
  - BuildProject
  variables:
    myWebAppName: $[ dependencies.InfraDeploy.outputs['frosti.webApp'] ] 
    myFunctionAppName: $[ dependencies.InfraDeploy.outputs['frosti.functionApp'] ] 
  pool:
    vmImage: macOS-latest
  steps:
    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'CascadeBrewingCo'
        downloadPath: '$(System.DefaultWorkingDirectory)'
    - task: AzureRmWebAppDeployment@4
      condition: ne(variables.myWebAppName, '')
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: '$(ServiceConnection)'
        appType: 'webAppLinux'
        WebAppName: '$(myWebAppName)'
        packageForLinux: '$(System.DefaultWorkingDirectory)/**/*.zip'
    - task: AzureFunctionApp@1
      condition: ne(variables.myFunctionAppName, '')
      inputs:
        azureSubscription: '$(ServiceConnection)'
        appType: 'functionAppLinux'
        appName: '$(myFunctionAppName)'
        package: '$(System.DefaultWorkingDirectory)/**/*.zip'